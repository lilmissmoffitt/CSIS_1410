import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import collections.GenericCollections;

class GenericCollectionsTest {
	
	public static List<Character> list = new ArrayList<>();
	public static List<String> strList = new ArrayList<>();

	@BeforeEach
	public static void setUpBeforeClass(){
		list.clear();
		strList.clear();
	}

	@AfterEach
	public static void tearDownAfterClass(){
		list.clear();
		strList.clear();
	}
	
	@Test
	void lettersAndNumbers_IsListEmpty() {
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}

	@Test
	void lettersAndNumbers_IsListNull() {
	list.add(null);
	assertEquals(null, GenericCollections.lettersAndNumbers(list));
	}

	@Test
	void lettersAndNumbers_NumbersAreFormatted() {;
	Collections.addAll(list, '1','2','3');
	Collections.addAll(strList, "N(1)", "N(2)","N(3)");
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}

//		@Test
//		void removeEveryNthElement_ThrowsIllegalArgumentException_If0() {
//		List<?> list = new ArrayList<>();
//		list.add(null);
//		assertThrows(IllegalArgumentException.class, () -> GenericCollections.removeEveryNthElement(list, 0),"n must be a positive number");
//		}

//		@Test
//		void removeEveryNthElement_ThrowsIllegalArgumentException_IfNegative() {
//		assertThrows(IllegalArgumentException.class, () -> GenericCollections.removeEveryNthElement(null, -5),"n must be a positive number");
//		}

//		@Test
//		void removeEveryNthElement_ThrowsNullPointerException() {
//		assertThrows(NullPointerException.class, () -> GenericCollections.removeEveryNthElement(null, 3),"n must be a positive number");
//		}
	}

