import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import collections.GenericCollections;

class GenericCollectionsTest {
	
	public static List<Character> list = new ArrayList<>();
	public static List<String> strList = new ArrayList<>();
	public static List<Integer> intList = new ArrayList<>();
	public static List<Integer> intList2 = new ArrayList<>();
	@BeforeEach
	public void setUpBeforeTest(){
		
	}

	@AfterEach
	public void tearDownAfterTest(){
		list.clear();
		strList.clear();
		intList.clear();
	}
	
	@Test
	void lettersAndNumbers_IsListEmpty() {
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}

	@Test
	void lettersAndNumbers_IsListNull() {
	list.add(null);
	assertEquals(null, GenericCollections.lettersAndNumbers(list));
	}

	@Test
	void lettersAndNumbers_NumbersAreFormatted() {;
	Collections.addAll(list, '1','2','3');
	Collections.addAll(strList, "N(1)", "N(2)","N(3)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	@Test
	void lettersAndNumbers_LowercaseLettersAreFormatted() {;
	Collections.addAll(list, 'a','b','c');
	Collections.addAll(strList, "L(a)", "L(b)","L(c)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}

	@Test
	void lettersAndNumbers_UppercaseLettersAreFormatted() {;
	Collections.addAll(list, 'A','B','C');
	Collections.addAll(strList, "U(a)", "U(b)","U(c)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	@Test
	void lettersAndNumbers_DoesNotAcceptCharactersThatAreNotNumbersOrLetters() {;
	Collections.addAll(list, 'A','*','$','c');
	Collections.addAll(strList, "U(a)", "L(c)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	@Test
	void lettersAndNumbers_AcceptsMixedUpperLowerAndNumbers() {;
	Collections.addAll(list, 'A','*','$','c','4','B','z','/','3');
	Collections.addAll(strList, "U(a)","L(c)","N(4)","U(b)", "L(z)", "N(3)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	@Test
	void lettersAndNumbers_ListIsInReverseOrder() {;
	Collections.addAll(list, 'A','*','$','c','4','B','z','/','3');
	Collections.addAll(strList, "N(3)","L(z)","U(b)","N(4)","L(c)","U(a)");
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	//tests for modify
	@Test
	void modify_ThrowsNullPointerException() {
		intList.add(null);
		assertThrows(NullPointerException.class, () -> GenericCollections.modify(intList));
	}
	@Test
	void modify_AddsFirst5MultiplesOfFourFiveAndSix() {;
	Collections.addAll(intList, 4, 5, 6, 8, 10, 12, 12, 15, 16, 18, 20, 20, 24, 25, 30);
	assertEquals(13, GenericCollections.modify(intList));
	}
	
//		@Test
//		void removeEveryNthElement_ThrowsIllegalArgumentException_If0() {
//		List<?> list = new ArrayList<>();
//		list.add(null);
//		assertThrows(IllegalArgumentException.class, () -> GenericCollections.removeEveryNthElement(list, 0),"n must be a positive number");
//		}

//		@Test
//		void removeEveryNthElement_ThrowsIllegalArgumentException_IfNegative() {
//		assertThrows(IllegalArgumentException.class, () -> GenericCollections.removeEveryNthElement(null, -5),"n must be a positive number");
//		}

//		@Test
//		void removeEveryNthElement_ThrowsNullPointerException() {
//		assertThrows(NullPointerException.class, () -> GenericCollections.removeEveryNthElement(null, 3),"n must be a positive number");
//		}
	}

