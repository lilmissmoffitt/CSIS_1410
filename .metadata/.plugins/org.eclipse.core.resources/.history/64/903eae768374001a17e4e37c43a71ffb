import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import collections.GenericCollections;

class GenericCollectionsTest {
	
	public static List<Character> list = new ArrayList<>();
	public static List<String> strList = new ArrayList<>();
	public static List<Integer> intList = new ArrayList<>();
	public static List<Integer> intList2 = new ArrayList<>();
	public static List<?> nthList;
	
	@BeforeEach
	public void setUpBeforeTest(){
		
	}

	@AfterEach
	public void tearDownAfterTest(){
		list.clear();
		strList.clear();
		intList.clear();
		intList2.clear();
	}
	
	@Test
	void lettersAndNumbers_IsListEmpty() {
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}

	@Test
	void lettersAndNumbers_IsListNull() {
	list.add(null);
	assertEquals(null, GenericCollections.lettersAndNumbers(list));
	}

	@Test
	void lettersAndNumbers_NumbersAreFormatted() {;
	Collections.addAll(list, '1','2','3');
	Collections.addAll(strList, "N(1)", "N(2)","N(3)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	@Test
	void lettersAndNumbers_LowercaseLettersAreFormatted() {;
	Collections.addAll(list, 'a','b','c');
	Collections.addAll(strList, "L(a)", "L(b)","L(c)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}

	@Test
	void lettersAndNumbers_UppercaseLettersAreFormatted() {;
	Collections.addAll(list, 'A','B','C');
	Collections.addAll(strList, "U(a)", "U(b)","U(c)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	@Test
	void lettersAndNumbers_DoesNotAcceptCharactersThatAreNotNumbersOrLetters() {;
	Collections.addAll(list, 'A','*','$','c');
	Collections.addAll(strList, "U(a)", "L(c)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	@Test
	void lettersAndNumbers_AcceptsMixedUpperLowerAndNumbers() {;
	Collections.addAll(list, 'A','*','$','c','4','B','z','/','3');
	Collections.addAll(strList, "U(a)","L(c)","N(4)","U(b)", "L(z)", "N(3)");
	Collections.reverse(strList);
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	@Test
	void lettersAndNumbers_ListIsInReverseOrder() {;
	Collections.addAll(list, 'A','*','$','c','4','B','z','/','3');
	Collections.addAll(strList, "N(3)","L(z)","U(b)","N(4)","L(c)","U(a)");
	assertEquals(strList, GenericCollections.lettersAndNumbers(list));
	}
	
	//tests for modify
	@Test
	void modify_ThrowsNullPointerException() {
		intList.add(null);
		assertThrows(NullPointerException.class, () -> GenericCollections.modify(intList));
	}
	
	@Test
	void modify_CountsUniqueNumbers() {
	Collections.addAll(intList, 5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4);
	assertEquals(7, GenericCollections.modify(intList));
	}
	
	@Test
	void modify_MultiplesOf3AreRemoved() {;
	Collections.addAll(intList, 3,3,6,9,12,18,24);
	assertEquals(7, GenericCollections.modify(intList));
	}
	
	@Test
	void modify_RemovesNegativeMultiplesOf3() {;
	Collections.addAll(intList, -3,3,6,-9,12,-18,24);
	assertEquals(7, GenericCollections.modify(intList));
	}
	
	@Test
	void modify_StartingWithAnEmptyListReturnsDefaultValues() {
		assertEquals(7, GenericCollections.modify(intList));
	}
	
	@Test
	void modify_ListIsInAcendingOrderCount() {
	Collections.addAll(intList, 1,2,3,4,5,6,7);
	assertEquals(10, GenericCollections.modify(intList));
	}
	
//	@Test
//	void modify_ListIsInAcendingOrder() {
//	Collections.addAll(intList2, 4, 5, 8, 10, 16, 20, 25);
//	GenericCollections.modify(intList);
//	assertEquals(intList, true);
//	}
	
	@Test
	void modify_IncludesNull() {
	Collections.addAll(intList, 1,2,3,4,5,6,7,null);
	assertThrows(NullPointerException.class, () -> GenericCollections.modify(intList));
	}
	
	//tests for removeEveryNthElement
	@Test
	void removeEveryNthElement_IfNull() {
	nthList = new ArrayList<String>();
	nthList.add(null);
	assertThrows(NullPointerException.class, () -> GenericCollections.removeEveryNthElement(nthList, 3));
	}
	
	@Test
	void removeEveryNthElement_IfZero(){
	assertThrows(IllegalArgumentException.class, () -> GenericCollections.removeEveryNthElement(nthList, 0));
	}
	
	@Test
	void removeEveryNthElement_IfNegative() {
	assertThrows(IllegalArgumentException.class, () -> GenericCollections.removeEveryNthElement(nthList, -4));
	}
	
	}

